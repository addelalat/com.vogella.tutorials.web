[[restjersey">
== JAX-RS with Jersey
[[jaxrs_intro">
=== JAX-RS
		
			Java defines REST support via the
			_Java Specification Request (JSR)_
			311. This specification is called
			JAX-RS (The Java API for
			RESTful
			Web
			Services).
			JAX-RS uses annotations
			to define the REST relevance of
			Java
			classes.
		

[[jersey_intro">
=== Jersey
		
			_Jersey_
			is the reference
			implementation for the JSR 311 specification.
		

		

			The
			Jersey implementation provides a library to implement Restful
			webservices in a Java servlet container.
		
		
			On the server side Jersey provides a servlet implementation which
			scans predefined
			classes to identify RESTful resources.
			In your
			`web.xml`
			configuration file your register this servlet for your web
			application.
		
		
			The Jersey implementation also provides a client
			library to
			communicate with
			a RESTful webservice.
		

		
			The base
			URL
			of this servlet is:
		
		
[source,text]
----
include::res/path/path.txt[]
----
		
		
			This servlet analyzes the incoming HTTP request and
			selects
			the
			correct class and method to respond to this request. This
			selection
			is
			based on annotations in the class and methods.
		
		
			A REST web application consists, therefore, out of data classes
			(resources)
			and
			services. These two types are typically maintained in
			different
			packages as the Jersey servlet will be instructed via the
			`web.xml`
			to
			scan certain packages for data classes.
		

		
			JAX-RS
			supports the creation of XML and JSON via
			the Java
			Architecture for
			XML Binding (JAXB).
		


[[restjersey_annotations">
=== JAX-RS annotations
		
			The most important
			annotations in JAX-RS are listed in the following
			table.

.Table Title
|===

		=== JAX-RS annotations
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					
						
|Annotation
|Description
						
					
					
						
|@PATH(your_path)
|
								Sets the path to base URL + /your_path. The base URL is
								based on
								your application name, the servlet and the URL pattern
								from the
								`web.xml`
								configuration file.
							
						
						
|@POST
|
								Indicates that the following method will answer to an HTTP
								POST
								request.
							
						
						
|@GET
|
								Indicates that the following method will answer to an HTTP
								GET
								request.
							
						
						
|@PUT
|
								Indicates that the following method will answer to an HTTP
								PUT
								request.
							
						
						
|@DELETE
|
								Indicates that the following method will answer to an HTTP
								DELETE
								request.
							
						
						
|@Produces(MediaType.TEXT_PLAIN[, more-types])
|
								@Produces defines which MIME type is delivered by a method
								annotated with @GET. In the example text ("text/plain") is
								produced. Other examples would be "application/xml" or
								"application/json".
							
						
						
|@Consumes(type[, more-types])
|
								@Consumes defines which MIME type is consumed by this
								method.
							
						
						
|@PathParam
|
								Used to inject values from the URL into a method
								parameter.
								This way you inject, for example, the ID of a resource
								into the method to get the correct object.
							
						
					
				
			|===
		   
		
			The complete path to a resource is based on the base
			URL and the
			@PATh annotation in your class.
		
		
[source,text]
----
include::res/path/path1.txt[]
----
		


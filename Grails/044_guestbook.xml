[[guestbookapplication">
== Exercise: Extend Grails web application
[[guestbookapplication_target">
=== Target
		
			In this exercise you finish the  guestbook application you started
			in
			<<firstgrails>>
			.
		

[[guestbookapplication_stopserver">
=== Stop the server
		
			If you Grails application from
			<<firstgrails>>
			is still running, stop the server via
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>C</keycap>
			</keycombo>
			.
			We need the command line to
			create more elements.
		

[[guestbookapplication_model">
=== Create the domain model
		
			Our application does not do anything at the moment. Lets create the
			a
			domain
			model.
			For your feedback system we would like to have:
			<itemizedlist>
				<listitem>
					Class Feedback: The feedback itself
				</listitem>
				<listitem>
					Class User: The person who gives feedback
				</listitem>
				<listitem>
					Class Comment: A remark to the feedback
				</listitem>
			</itemizedlist>
		
		
			Grails can create templates with empty classes and prepared unit
			tests for your domain model. Create the domain model scaffolds via
			the
			following
			commands:
		
		
[source,bourne]
----
include::res/firstgrails/create-domain-class.txt[]
----
		
		
			This creates Groovy classes for the specified domain model in the
			directory
			<filename class="directory">.\grails-app/domain`
			. In the
			directory
			<filename class="directory">.\test\unit`
			you
			find empty files for your unit tests.
		
		Use a text editor to change the classes to the following:
		
[source,java]
----
include::res/firstgrails/Feedback.java[]
----
		
		
[source,java]
----
include::res/firstgrails/User.java[]
----
		
		
[source,java]
----
include::res/firstgrails/Comment.java[]
----
		
		
			Grails allows to define
			constraints for the domain model via a
			static
			method. Some of these
			constraints, e.g.,
			<code>nullable</code>
			are reflected
			in the database, others are
			only used to validate this
			value via the
			user interface, e.g., the URL
			constraint.
		
		
			<tip>
				All model classes come with have a version and id property
				of type
				<code>Long</code>
				and a
				<code>toString()</code>
				method by default.
				These methods will be dynamically injected
				if the
				model has no implementation of it's own.
				<code>dataCreated</code>
				and
				<code>lastUpdated</code>
				are also known by Grails
				and will be filled automatically.
			
		

		
			<tip>
				Changes in the domain model may require a restart of the Grails
				server and running the following command:
				
					<programlisting Language="Bourne">
						<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
							parse="text" href="./examples/firstgrails/grailsclean.txt" />
					</programlisting>
				
			
		



[[guestbookapplication_controllerview">
=== Dynamic Scaffolding
		
			Grails supports dynamic and static scaffolding for the user
			interface. If you use dynamic scaffolding, then a user interface for
			the
			domain class is dynamically generated by the Grails runtime. This
			user
			interface allows the operations Create, Read, Update and Delete
			(CRUD).
		
		
			To use dynamic scaffolding, create controllers for your domain
			class via the following commands:
		
		
[source,bourne]
----
include::res/firstscripts/generate-controller.txt[]
----
		
		
			This creates controller classes in the directory
			<filename class="directory">/grails-app/controllers`
			.
		
		
			Activate the dynamic scaffolding in each controller by
			replacing the
			line which starts with
			<code>def index</code>
			with
			<code>def scaffold = NameOfTheDomainClass</code>
			.
			For example, for the
			<code>FeedbackController</code>
			.
		
		
[source,java]
----
include::res/firstgrails/FeedbackController.java[]
----
		
		
			Do this also for
			<code>UserController</code>
			and
			<code>CommentController</code>
			.

		

[[guestbookapplication_testing">
=== Testing the generated application

		
			Run the application again via:
		
	
		<programlisting Language="Bourne">
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				parse="text" href="./examples/firstgrails/grailsrun.txt[]
----
	
	
		Browse to
		http://localhost:8080/com.vogella.grails.guestbook">
			http://localhost:8080/com.vogella.grails.guestbook
		]
		.
		You should have a full CRUD (create, retrieve, update, delete)
		application available. To start the app, click on
		_UserController_
		and create a user.
	
	
image::/home/firstgrails30.png" size="40" />
			</imageobject>
		</mediaobject>
	
	
image::/home/firstgrails34.png" size="40" />
			</imageobject>
		</mediaobject>
	
	
image::/home/firstgrails40.png" size="40" />
			</imageobject>
		</mediaobject>
	
	
		Afterwards use the
		_FeedbackController_
		to create a comment.
	
	
image::firstgrails50.png" size="40" />
			</imageobject>
		</mediaobject>
	
	
		Click on
		_New Feedback_
		and enter a feedback.
	
	
image::firstgrails60.png"/>
			</imageobject>
			<textobject>
				<phrase></phrase>
			</textobject>
		</mediaobject>
	
	



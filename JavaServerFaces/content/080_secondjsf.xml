<section id="secondjsf">
== Your second JSF application
	 This second JSF application will add validation, resource
		bundles and navigation as additional functionality.
	
	<section id="secondjsf_project">
=== Create JSF Project
		 Create a new Dynamic Web Project "de.vogella.jsf.starter".
		

	<section id="secondjsf_model">
=== Domain model
		 Create a new package de.vogella.jsf.starter.model and the
			following class.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/User.java[]
----
		
		
			<tip> Please note that we are hard-coding that only user tester with
				password tester can login.
			
		
		 Create the following class.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/Card.java[]
----
		
		
			<tip> The class Card contains currently some controller code. The
				next chapter will demonstrate how to keep your model code clean and
				how to use controllers directly.
			
		

	<section id="secondjsf_managedbeans">
=== Register your managed beans
		 Double-click on faces-config.xml and select the tab
			"ManagedBeans". Register your User.java and Card.java as managed
			beans.
		

	<section id="secondjsf_validators">
=== Validators
		 JSP allows to define validators which allows to check certain
			values which are placed in the UI. Create therefore the following
			class.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/LoginValidator.java[]
----
		
		 Select your faces-config.xml and select the tab Component.
			Select Validators and press Add.
		
		
image::validator10.gif[]
		
		
image::validator20.gif[]
		

	<section id="secondjsf_resourcebundle">
=== Resource bundle for messages
		 With JSP it is easy to use resource bundles for the static text
			in your JSP application. Create the following file
			"messages.properties" in your source folder under the package
			"de.vogella.jsf.starter".
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/messages.properties[]
----
		

	<section id="secondjsf_firstjsp">
=== JavaServer Page with JSF components
		 Create a new JSP page "LoginView.jsp" and change the code to
			the following:
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/LoginView.jsp[]
----
		
		 Lets explain a few fields.
		

.Table Title
|===

				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					
						
|Element
|Description
						
					
					
						
|	<![CDATA[ 
						<%@ taglib prefix="f" uri="http://java.sun.com/jsf/core"%>
						<%@ taglib prefix="h" uri="http://java.sun.com/jsf/html"%>
							]]>
|Makes the core and html tags available in the page
							
						
						
|	<![CDATA[ <f:view>]]>
|Indicates that the following will use JSF
								components.
							
						
						
|	<![CDATA[ <f:loadBundle basename="de.vogella.jsf.starter.messages" var="msg"/>]]>
|load the resource / message bundle which is then
								available
								in the application under the name msg
							
						
						
|<![CDATA[  <h:form> ]]>
|Starts a form
						
						
|<![CDATA[ <h:outputLabel value="#{msg.user}"></h:outputLabel>  ]]>
|Define a label which used the text user define in
								the
								resource bundle
							
						
						
|<![CDATA[ 	<h:inputText tabindex="1" value="#{user.name}"></h:inputText> ]]>
|Define a input field which used the managed bean
								user and
								maps to field name
							
						
						
|<![CDATA[ 	<h:inputSecret tabindex="2" value="#{user.password}">]]>
|Masked input files, mapped to the managed bean user
								and
								field password
							
						
						
|<![CDATA[ 	<h:commandButton action="#{user.login}" value="#{msg.login}"></h:commandButton> ]]>
|The button is mapped to the method user.login
						
					
				
			|===
		
		 Create another JSP "Trainer.jsp" with the following code.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/Trainer.jsp[]
----
		
		 Create another JSP FailedLogin.jsp with the following code.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/secondjsf/FailedLogin.jsp[]
----
		

	<section id="navigationrule">
=== Navigation Rule
		 Select your faces-config.xml and select the tab "Navigation
			Rule". Make the palette available if necessary.
		
		
image::navigationrule10.gif[]
		
		 Select Page and click in the workarea. Add LoginView and
			Trainer to the workspace.
		
		
image::navigationrule20.gif[]
		
		 Click on Link, then on LoginView and then on Trainer. You
			should have now an arrow which indicates a navigation rule.
		
		
image::navigationrule30.gif[]
		
		Click in the Palette on Select. Select then the arrow and the
			properities view. Input "success" in the From â€“ Outcome
		
		
image::navigationrule40.gif[]
		
		
			<tip> The user bean return the String success. In the navigation rule
				you now defined that if we receive "success" then we should be going
				to the next page.
			
		
		
image::navigationrule50.gif[]
		
		 Add a navigation rule so that in the case the user does not use
			the right user / password you send him to the failure page.
		

	<section id="secondjsf_run">
=== Run your webapplication
		 To run your webapplication, select LoginView.jsp, right
			mouse-click- >run as -> run on server.
		
		
			<tip> Remember that we are hard-coding that only user "tester" with
				password "tester" can login. Try another user this should not work.
			
		
		 You should be able to login with the right user and move to the
			next page.
		
		
image::secondjsf90.gif[]
		


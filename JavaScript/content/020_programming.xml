<section id="programming">
	<title>Programming in JavaScript</title>
	<section id="javascript_variables">

		<title>Variables</title>
		<para>
			The following
			demonstrates how to declare and use variables in
			JavaScript.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/javascript/variables.html" />
			</programlisting>
		</para>
		<para> You may notice that there are two ways of declaring variables.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/javascript/var.txt" />
			</programlisting>
		</para>
		<para> Variables defined without the keyword "var" are global
			variables.
			Variables defined with "var" are scoped according to their
			declaration, e.g. if you define a "var" in a function this variable
			is only valid in this function.
	</para>
		<para> It is good JavaScript practice to always use the "var" keyword.
		</para>
		<para> JavaScript has four basic types, Object and the primitive types
			Number, String, and
			Boolean.</para>

	</section>
	<section id="javascript_arrays">
		<title>Arrays</title>
		<para> Arrays are Objects in JavaScript. You can define them and use
			the method pop() to remove the first element and push(newValue) to
			add a new element at the end. You can also iterate over it. 
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/javascript/array.txt" />
			</programlisting>
		</para>
	</section>
	<section id="javascript_functions">

		<title>Functions</title>
		<para>
			A function in JavaScript encapsulates reusable code and are
			represented as Objects. Functions can
			be directly called via other
			JavaScript code. It is
			recommended that
			you
			put
			functions in the header
			of the HTML page. 
			</para>
		<para> Functions are declared via the function keyword. You can call
			a
			function directly, or use the apply method on the function.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/function/function1.html" />
			</programlisting>
		</para>
	</section>

	<section id="javascript_prototype">

		<title>Prototype in JavaScripts</title>
		<para> JavaScript does not support classes and inheritance of classes
			like object orientated programming languages. JavaScript is a
			prototype-based language, by this approach you can reuse functions
			by cloning existing objects.  </para>
	</section>
	<section id="javascript_buttons">

		<title>Assigning functions to HTML buttons</title>
		<para>The following gives an example how to assign a function to an
			HTML button.</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/function/function.html" />
			</programlisting>
		</para>

	</section>

	<section id="javascript_events">

		<title>HTML Events</title>
		<para>
			JavaScript can react to certain event on the page and / or
			on
			certain webpage elements, e.g. buttons. You can register a function
			to a
			event in the HTML page. 
		</para>
		<para>
			<table frame='all'>
				<title>Events in Javascript</title>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>Event</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>Onload</entry>
							<entry>
								Triggered then the user loads the page.
								The onload even can
								for example be used
								to check the visitors browser type.
							</entry>
						</row>
						<row>
							<entry>onChange</entry>
							<entry>
								Called whenever a field is changed. Can
								for example be used
								to validate an input
								field of a form.
							</entry>
						</row>
						<row>
							<entry>onSubmit</entry>
							<entry>
								Called then a user clicks on the submit
								button of a form.
							</entry>
						</row>
						<row>
							<entry>OnMouseOver and OnMouseOut</entry>
							<entry>
								Called then the mouse enters a certain
								element on the page
								or leaves it.
							</entry>
						</row>

					</tbody>
				</tgroup>
			</table>
		</para>


	</section>

</section>
